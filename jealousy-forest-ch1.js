<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/100/three.min.js"></script>
<script src="https://klevron.github.io/codepen/three.js/OrbitControls.js"></script> <script>
let scene, camera, renderer, butterflies = [], mouse = new THREE.Vector2();
let butterfliesVisible = true; // Track visibility state
const initialButterflyCount = 20; // Initial butterfly count // URLs for the three sets of textures
const butterflyTextures = [ { body: 'https://cdn.prod.website-files.com/62ab3cd3dc1127e8e3b3e5af/6721e6863bfed6fadb8a1dd3_butterfly_1_body.png', leftWing: 'https://cdn.prod.website-files.com/62ab3cd3dc1127e8e3b3e5af/6721e6869f177ad828453ce2_butterfly_1_left_wing.png', rightWing: 'https://cdn.prod.website-files.com/62ab3cd3dc1127e8e3b3e5af/6721e686c3e664992b9f6788_butterfly_1_right_wing.png', scale: 1, yOffset: 0 }, { body: 'https://cdn.prod.website-files.com/62ab3cd3dc1127e8e3b3e5af/6727b6463ee0071e5b7123dd_butterfly_3_body.png', leftWing: 'https://cdn.prod.website-files.com/62ab3cd3dc1127e8e3b3e5af/6727b647dd9b588ebe5767ce_butterfly_3_wing_left.png', rightWing: 'https://cdn.prod.website-files.com/62ab3cd3dc1127e8e3b3e5af/6727b6473ccd6c66e6e4954a_butterfly_3_wing_right.png', scale: 1, yOffset: 0 }, { body: 'https://cdn.prod.website-files.com/62ab3cd3dc1127e8e3b3e5af/6727b544dbd8307facfb8a01_butterfly_4_body.png', leftWing: 'https://cdn.prod.website-files.com/62ab3cd3dc1127e8e3b3e5af/6727b6478c83e7e1c68cb8c9_butterfly_4_wing_left.png', rightWing: 'https://cdn.prod.website-files.com/62ab3cd3dc1127e8e3b3e5af/6727b647cbd18cecf00b0eb6_butterfly_4_wing_right.png', scale: 1, yOffset: 0 }
]; function init() { scene = new THREE.Scene(); camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); camera.position.z = 75; renderer = new THREE.WebGLRenderer({ alpha: true }); renderer.setSize(window.innerWidth, window.innerHeight); document.getElementById('jealousy-forest-1').appendChild(renderer.domElement); createButterflies(initialButterflyCount); window.addEventListener('resize', onWindowResize); document.addEventListener('mousemove', onMouseMove); document.addEventListener('click', toggleButterfliesVisibility); animate();
} function createButterflies(count) { for (let i = 0; i < count; i++) { const textures = butterflyTextures[Math.floor(Math.random() * butterflyTextures.length)]; const bodyTexture = new THREE.TextureLoader().load(textures.body); const leftWingTexture = new THREE.TextureLoader().load(textures.leftWing); const rightWingTexture = new THREE.TextureLoader().load(textures.rightWing); const butterfly = new Butterfly(bodyTexture, leftWingTexture, rightWingTexture, textures.scale, textures.yOffset); butterflies.push(butterfly); scene.add(butterfly.group); }
} class Butterfly { constructor(bodyTexture, leftWingTexture, rightWingTexture, scale, yOffset) { const bodyMaterial = new THREE.MeshBasicMaterial({ map: bodyTexture, transparent: true, depthTest: false }); const leftWingMaterial = new THREE.MeshBasicMaterial({ map: leftWingTexture, transparent: true, side: THREE.DoubleSide, depthTest: false }); const rightWingMaterial = new THREE.MeshBasicMaterial({ map: rightWingTexture, transparent: true, side: THREE.DoubleSide, depthTest: false }); this.body = new THREE.Mesh(new THREE.PlaneGeometry(6 * scale, 9 * scale), bodyMaterial); this.body.position.set(0, yOffset, 0.05); this.leftWing = new THREE.Mesh(new THREE.PlaneGeometry(10 * scale, 15 * scale), leftWingMaterial); this.leftWing.position.set(-5 * scale, 0, -0.1); this.rightWing = new THREE.Mesh(new THREE.PlaneGeometry(10 * scale, 15 * scale), rightWingMaterial); this.rightWing.position.set(5 * scale, 0, -0.1); this.group = new THREE.Group(); this.group.add(this.body); this.group.add(this.leftWing); this.group.add(this.rightWing); this.group.position.set( (Math.random() - 0.5) * 300, (Math.random() - 0.5) * 300, (Math.random() - 0.5) * 300 ); this.group.rotation.set( (Math.random() - 0.5) * Math.PI / 8, 0, 0 ); this.velocity = new THREE.Vector3( (Math.random() - 0.5) * 0.5, (Math.random() - 0.5) * 0.5, (Math.random() - 0.5) * 0.5 ); // Assign a behavior type with 70% "attracted" and 30% "wandering" this.behavior = Math.random() < 0.7 ? 'attracted' : 'wandering'; this.flapAngle = 0; this.bodyWiggleAngle = 0; this.randomOffset = Math.random() * Math.PI * 2; } update() { if (!butterfliesVisible) return; // Skip update if butterflies are hidden const attractionStrength = this.behavior === 'attracted' ? 0.0045 : 0.002; const wanderStrength = this.behavior === 'wandering' ? 0.015 : 0.007; const targetPosition = new THREE.Vector3(mouse.x * 100, mouse.y * 100, 0); const direction = targetPosition.sub(this.group.position).normalize(); this.velocity.add(direction.multiplyScalar(attractionStrength)); this.velocity.x += (Math.random() - 0.5) * wanderStrength; this.velocity.y += (Math.random() - 0.5) * wanderStrength; this.velocity.z += (Math.random() - 0.5) * wanderStrength; this.velocity.clampLength(0, 0.5); this.group.position.add(this.velocity); this.flapAngle += 0.15; const flapRotation = Math.sin(this.flapAngle) * 0.12; this.leftWing.rotation.z = flapRotation; this.rightWing.rotation.z = -flapRotation; this.bodyWiggleAngle += 0.075; const bodyWiggle = Math.sin(this.bodyWiggleAngle) * 0.006; this.body.rotation.z = bodyWiggle; this.group.position.x += Math.sin(this.flapAngle + this.randomOffset) * 0.1; this.group.position.y += Math.cos(this.flapAngle + this.randomOffset) * 0.1; }
} function animate() { requestAnimationFrame(animate); butterflies.forEach(butterfly => butterfly.update()); renderer.render(scene, camera);
} function onWindowResize() { camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize(window.innerWidth, window.innerHeight);
} function onMouseMove(event) { mouse.x = (event.clientX / window.innerWidth) * 2 - 1; mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
} function toggleButterfliesVisibility() { butterfliesVisible = !butterfliesVisible; // Toggle visibility state butterflies.forEach(butterfly => { butterfly.group.visible = butterfliesVisible; // Update visibility of each butterfly });
} window.addEventListener('load', init);
</script>
<script>
document.addEventListener('DOMContentLoaded', () => { const scrollContainer = document.querySelector('.ka3tm-entry-container'); if (scrollContainer) { let isScrolling; // Add event listener for scroll event scrollContainer.addEventListener('scroll', () => { // Add the 'scrolling' class when scrolling starts scrollContainer.classList.add('scrolling'); // Clear any previous timeout clearTimeout(isScrolling); // Remove 'scrolling' class after 300ms of no scroll isScrolling = setTimeout(() => { scrollContainer.classList.remove('scrolling'); }, 900); }); }
});
</script>
